@startuml

skinparam classAttributeIconSize 0

abstract class ExcursionEstado <<abstract>> {
+<<abstract>>inscribir(contexto: Excursion, unUsuario: Usuario)
+<<abstract>>obtenerInformacion(contexto: Excursion): String
}

class EstadoProvisorio {
+inscribir(contexto: Excursion, unUsuario: Usuario)
+obtenerInformacion(contexto: Excursion): String
}

class EstadoDefinitivo {
+inscribir(contexto: Excursion, unUsuario: Usuario)
+obtenerInformacion(contexto: Excursion): String
}

class EstadoLleno {
+inscribir(contexto: Excursion, unUsuario: Usuario)
+obtenerInformacion(contexto: Excursion): String
}

class Excursion {
-nombre: String
-fechaInicio: LocalDate
-fechaFin: LocalDate
-puntoEncuentro: String
-costo: double
-cupoMinimo: int
-cupoMaximo: int
+Excursion(nombre: String, fechaInicio: LocalDate, fechaFin: LocalDate, puntoEncuentro: String, costo: double, cupoMinimo: int, cupoMaximo: int)
+inscribir(unUsuario: Usuario)
+obtenerInformacion(): String
+cantidadInscriptos(): int
+cantidadInscriptosFaltantesCupoMinimo(): int
+cantidadInscriptosFaltantesCupoMaximo(): int
+seAlcanzoCupoMinimo(): boolean
+seAlcanzoCupoMaximo(): boolean
+obtenerMailInscriptos(): String[*]
+cambiarEstado(nuevoEstado: ExcursionEstado)
+inscribirUsuario(unUsuario: Usuario)
+agregarUsuarioListaEspera(unUsuario: Usuario)
}

class Usuario {
-nombre: String
-apellido: String
-email: String
+Usuario(nombre: String, apellido: String, email: String)
+getNombre(): String
+getEmail(): String
}

Excursion --> ExcursionEstado : -estado
Excursion o--* Usuario : -inscriptos
Excursion o--* Usuario : -listaEspera

EstadoProvisorio -up-|> ExcursionEstado
EstadoDefinitivo -up-|> ExcursionEstado
EstadoLleno -up-|> ExcursionEstado

@enduml
