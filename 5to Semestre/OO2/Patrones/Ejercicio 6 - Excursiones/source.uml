@startuml

skinparam classAttributeIconSize 0

abstract class ExcursionEstado <<State>> {
+<<abstract>>inscribir(contexto: Excursion, unUsuario: Usuario)
+<<abstract>>obtenerInformacion(contexto: Excursion): String
}

class EstadoProvisorio <<ConcreteStateA>> {
+inscribir(contexto: Excursion, unUsuario: Usuario)
+obtenerInformacion(contexto: Excursion): String
}

class EstadoDefinitivo <<ConcreteStateB>> {
+inscribir(contexto: Excursion, unUsuario: Usuario)
+obtenerInformacion(contexto: Excursion): String
}

class EstadoLleno <<ConcreteStateC>> {
+inscribir(contexto: Excursion, unUsuario: Usuario)
+obtenerInformacion(contexto: Excursion): String
}

class Excursion <<Context>> {
-nombre: String
-fechaInicio: Date
-fechaFin: Date
-puntoEncuentro: String
-costo: Real
-cupoMinimo: Integer
-cupoMaximo: Integer
+Excursion(nombre: String, fechaInicio: Date, fechaFin: Date, puntoEncuentro: String, costo: Real, cupoMinimo: Integer, cupoMaximo: Integer)
+inscribir(unUsuario: Usuario)
+obtenerInformacion(): String
+cantidadInscriptos(): Integer
+cantidadInscriptosFaltantesCupoMinimo(): Integer
+cantidadInscriptosFaltantesCupoMaximo(): Integer
+seAlcanzoCupoMinimo(): Boolean
+seAlcanzoCupoMaximo(): Boolean
+obtenerMailInscriptos(): String[*]
+cambiarEstado(nuevoEstado: ExcursionEstado)
+inscribirUsuario(unUsuario: Usuario)
+agregarUsuarioListaEspera(unUsuario: Usuario)
}

class Usuario {
-nombre: String
-apellido: String
-email: String
+Usuario(nombre: String, apellido: String, email: String)
+getNombre(): String
+getEmail(): String
}

Excursion --> ExcursionEstado : -estado
Excursion o--* Usuario : -inscriptos
Excursion o--* Usuario : -listaEspera

EstadoProvisorio -up-|> ExcursionEstado
EstadoDefinitivo -up-|> ExcursionEstado
EstadoLleno -up-|> ExcursionEstado

@enduml
